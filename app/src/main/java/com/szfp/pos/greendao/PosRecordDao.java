package com.szfp.pos.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.pos.model.PosRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POS_RECORD".
*/
public class PosRecordDao extends AbstractDao<PosRecord, Long> {

    public static final String TABLENAME = "POS_RECORD";

    /**
     * Properties of entity PosRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tsn = new Property(1, String.class, "tsn", false, "TSN");
        public final static Property TotalStake = new Property(2, Float.class, "totalStake", false, "TOTAL_STAKE");
        public final static Property CreateTime = new Property(3, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property TID = new Property(4, String.class, "tID", false, "T_ID");
        public final static Property MatchPlayed = new Property(5, java.util.Date.class, "matchPlayed", false, "MATCH_PLAYED");
        public final static Property ClosingTime = new Property(6, String.class, "closingTime", false, "CLOSING_TIME");
        public final static Property Validity = new Property(7, java.util.Date.class, "validity", false, "VALIDITY");
        public final static Property List = new Property(8, String.class, "list", false, "LIST");
    }


    public PosRecordDao(DaoConfig config) {
        super(config);
    }
    
    public PosRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POS_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TSN\" TEXT," + // 1: tsn
                "\"TOTAL_STAKE\" REAL," + // 2: totalStake
                "\"CREATE_TIME\" INTEGER," + // 3: createTime
                "\"T_ID\" TEXT," + // 4: tID
                "\"MATCH_PLAYED\" INTEGER," + // 5: matchPlayed
                "\"CLOSING_TIME\" TEXT," + // 6: closingTime
                "\"VALIDITY\" INTEGER," + // 7: validity
                "\"LIST\" TEXT);"); // 8: list
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POS_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PosRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tsn = entity.getTsn();
        if (tsn != null) {
            stmt.bindString(2, tsn);
        }
 
        Float totalStake = entity.getTotalStake();
        if (totalStake != null) {
            stmt.bindDouble(3, totalStake);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime.getTime());
        }
 
        String tID = entity.getTID();
        if (tID != null) {
            stmt.bindString(5, tID);
        }
 
        java.util.Date matchPlayed = entity.getMatchPlayed();
        if (matchPlayed != null) {
            stmt.bindLong(6, matchPlayed.getTime());
        }
 
        String closingTime = entity.getClosingTime();
        if (closingTime != null) {
            stmt.bindString(7, closingTime);
        }
 
        java.util.Date validity = entity.getValidity();
        if (validity != null) {
            stmt.bindLong(8, validity.getTime());
        }
 
        String list = entity.getList();
        if (list != null) {
            stmt.bindString(9, list);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PosRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tsn = entity.getTsn();
        if (tsn != null) {
            stmt.bindString(2, tsn);
        }
 
        Float totalStake = entity.getTotalStake();
        if (totalStake != null) {
            stmt.bindDouble(3, totalStake);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime.getTime());
        }
 
        String tID = entity.getTID();
        if (tID != null) {
            stmt.bindString(5, tID);
        }
 
        java.util.Date matchPlayed = entity.getMatchPlayed();
        if (matchPlayed != null) {
            stmt.bindLong(6, matchPlayed.getTime());
        }
 
        String closingTime = entity.getClosingTime();
        if (closingTime != null) {
            stmt.bindString(7, closingTime);
        }
 
        java.util.Date validity = entity.getValidity();
        if (validity != null) {
            stmt.bindLong(8, validity.getTime());
        }
 
        String list = entity.getList();
        if (list != null) {
            stmt.bindString(9, list);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PosRecord readEntity(Cursor cursor, int offset) {
        PosRecord entity = new PosRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tsn
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // totalStake
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tID
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // matchPlayed
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // closingTime
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // validity
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // list
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PosRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTsn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTotalStake(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setTID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMatchPlayed(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setClosingTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setValidity(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setList(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PosRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PosRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PosRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
