package com.szfp.pos.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.pos.model.LoginRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_RECORD".
*/
public class LoginRecordDao extends AbstractDao<LoginRecord, Long> {

    public static final String TABLENAME = "LOGIN_RECORD";

    /**
     * Properties of entity LoginRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LoginDate = new Property(1, java.util.Date.class, "loginDate", false, "LOGIN_DATE");
        public final static Property LogoutDate = new Property(2, java.util.Date.class, "logoutDate", false, "LOGOUT_DATE");
        public final static Property TerminalId = new Property(3, String.class, "terminalId", false, "TERMINAL_ID");
        public final static Property SoldQty = new Property(4, int.class, "soldQty", false, "SOLD_QTY");
        public final static Property PaymentQty = new Property(5, int.class, "paymentQty", false, "PAYMENT_QTY");
        public final static Property SoldAmount = new Property(6, Float.class, "soldAmount", false, "SOLD_AMOUNT");
        public final static Property PaymentAmount = new Property(7, Float.class, "paymentAmount", false, "PAYMENT_AMOUNT");
        public final static Property NetAmount = new Property(8, Float.class, "netAmount", false, "NET_AMOUNT");
    }


    public LoginRecordDao(DaoConfig config) {
        super(config);
    }
    
    public LoginRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LOGIN_DATE\" INTEGER," + // 1: loginDate
                "\"LOGOUT_DATE\" INTEGER," + // 2: logoutDate
                "\"TERMINAL_ID\" TEXT," + // 3: terminalId
                "\"SOLD_QTY\" INTEGER NOT NULL ," + // 4: soldQty
                "\"PAYMENT_QTY\" INTEGER NOT NULL ," + // 5: paymentQty
                "\"SOLD_AMOUNT\" REAL," + // 6: soldAmount
                "\"PAYMENT_AMOUNT\" REAL," + // 7: paymentAmount
                "\"NET_AMOUNT\" REAL);"); // 8: netAmount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date loginDate = entity.getLoginDate();
        if (loginDate != null) {
            stmt.bindLong(2, loginDate.getTime());
        }
 
        java.util.Date logoutDate = entity.getLogoutDate();
        if (logoutDate != null) {
            stmt.bindLong(3, logoutDate.getTime());
        }
 
        String terminalId = entity.getTerminalId();
        if (terminalId != null) {
            stmt.bindString(4, terminalId);
        }
        stmt.bindLong(5, entity.getSoldQty());
        stmt.bindLong(6, entity.getPaymentQty());
 
        Float soldAmount = entity.getSoldAmount();
        if (soldAmount != null) {
            stmt.bindDouble(7, soldAmount);
        }
 
        Float paymentAmount = entity.getPaymentAmount();
        if (paymentAmount != null) {
            stmt.bindDouble(8, paymentAmount);
        }
 
        Float netAmount = entity.getNetAmount();
        if (netAmount != null) {
            stmt.bindDouble(9, netAmount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date loginDate = entity.getLoginDate();
        if (loginDate != null) {
            stmt.bindLong(2, loginDate.getTime());
        }
 
        java.util.Date logoutDate = entity.getLogoutDate();
        if (logoutDate != null) {
            stmt.bindLong(3, logoutDate.getTime());
        }
 
        String terminalId = entity.getTerminalId();
        if (terminalId != null) {
            stmt.bindString(4, terminalId);
        }
        stmt.bindLong(5, entity.getSoldQty());
        stmt.bindLong(6, entity.getPaymentQty());
 
        Float soldAmount = entity.getSoldAmount();
        if (soldAmount != null) {
            stmt.bindDouble(7, soldAmount);
        }
 
        Float paymentAmount = entity.getPaymentAmount();
        if (paymentAmount != null) {
            stmt.bindDouble(8, paymentAmount);
        }
 
        Float netAmount = entity.getNetAmount();
        if (netAmount != null) {
            stmt.bindDouble(9, netAmount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LoginRecord readEntity(Cursor cursor, int offset) {
        LoginRecord entity = new LoginRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // loginDate
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // logoutDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // terminalId
            cursor.getInt(offset + 4), // soldQty
            cursor.getInt(offset + 5), // paymentQty
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // soldAmount
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // paymentAmount
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8) // netAmount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLoginDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setLogoutDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTerminalId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSoldQty(cursor.getInt(offset + 4));
        entity.setPaymentQty(cursor.getInt(offset + 5));
        entity.setSoldAmount(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setPaymentAmount(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setNetAmount(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
